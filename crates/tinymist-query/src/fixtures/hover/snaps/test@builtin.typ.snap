---
source: crates/tinymist-query/src/hover.rs
expression: "JsonRepr::new_redacted(result, &REDACT_LOC)"
input_file: crates/tinymist-query/src/fixtures/hover/builtin.typ
---
{
 "contents": "```typc\nlet table(children, children, align: alignment | auto | array | function, column-gutter: auto | relative | fraction | int | array, columns: auto | relative | fraction | int | array, fill: color | gradient | pattern | none | array | function, gutter: auto | relative | fraction | int | array, inset: relative | dictionary | array | function, row-gutter: auto | relative | fraction | int | array, rows: auto | relative | fraction | int | array, stroke: length | color | gradient | pattern | dictionary | stroke | none | array | function);\n```\n---\n\n\nA table of items.\n\nTables are used to arrange content in cells. Cells can contain arbitrary\ncontent, including multiple paragraphs and are specified in row-major order.\nFor a hands-on explanation of all the ways you can use and customize tables\nin Typst, check out the [table guide]($guides/table-guide).\n\nBecause tables are just grids with different defaults for some cell\nproperties (notably `stroke` and `inset`), refer to the [grid\ndocumentation]($grid) for more information on how to size the table tracks\nand specify the cell appearance properties.\n\nIf you are unsure whether you should be using a table or a grid, consider\nwhether the content you are arranging semantically belongs together as a set\nof related data points or similar or whether you are just want to enhance\nyour presentation by arranging unrelated content in a grid. In the former\ncase, a table is the right choice, while in the latter case, a grid is more\nappropriate. Furthermore, Typst will annotate its output in the future such\nthat screenreaders will annouce content in `table` as tabular while a grid's\ncontent will be announced no different than multiple content blocks in the\ndocument flow.\n\nNote that, to override a particular cell's properties or apply show rules on\ntable cells, you can use the [`table.cell`]($table.cell) element. See its\ndocumentation for more information.\n\nAlthough the `table` and the `grid` share most properties, set and show\nrules on one of them do not affect the other.\n\nTo give a table a caption and make it [referenceable]($ref), put it into a\n[figure].\n\n# Example\n\nThe example below demonstrates some of the most common table options.\n```example\n#table(\n  columns: (1fr, auto, auto),\n  inset: 10pt,\n  align: horizon,\n  table.header(\n    [], [*Area*], [*Parameters*],\n  ),\n  image(\"cylinder.svg\"),\n  $ pi h (D^2 - d^2) / 4 $,\n  [\n    $h$: height \\\n    $D$: outer radius \\\n    $d$: inner radius\n  ],\n  image(\"tetrahedron.svg\"),\n  $ sqrt(2) / 12 a^3 $,\n  [$a$: edge length]\n)\n```\n\nMuch like with grids, you can use [`table.cell`]($table.cell) to customize\nthe appearance and the position of each cell.\n\n```example\n>>> #set page(width: auto)\n>>> #set text(font: \"IBM Plex Sans\")\n>>> #let gray = rgb(\"#565565\")\n>>>\n#set table(\n  stroke: none,\n  gutter: 0.2em,\n  fill: (x, y) =>\n    if x == 0 or y == 0 { gray },\n  inset: (right: 1.5em),\n)\n\n#show table.cell: it => {\n  if it.x == 0 or it.y == 0 {\n    set text(white)\n    strong(it)\n  } else if it.body == [] {\n    // Replace empty cells with 'N/A'\n    pad(..it.inset)[_N/A_]\n  } else {\n    it\n  }\n}\n\n#let a = table.cell(\n  fill: green.lighten(60%),\n)[A]\n#let b = table.cell(\n  fill: aqua.lighten(60%),\n)[B]\n\n#table(\n  columns: 4,\n  [], [Exam 1], [Exam 2], [Exam 3],\n\n  [John], [], a, [],\n  [Mary], [], a, a,\n  [Robert], b, a, b,\n)\n```",
 "range": "0:20:0:25"
}

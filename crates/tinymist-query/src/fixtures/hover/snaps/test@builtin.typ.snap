---
source: crates/tinymist-query/src/hover.rs
expression: content
input_file: crates/tinymist-query/src/fixtures/hover/builtin.typ
---
Range: 0:20:0:25

```typc
let table(
  ..children: content,
  align: alignment | array | auto | function = auto,
  column-gutter: array | auto | length | type = (),
  columns: array | auto | length | type = (),
  fill: color = none,
  gutter: array | auto | length | type = (),
  inset: inset = 0% + 5pt,
  row-gutter: array | auto | length | type = (),
  rows: array | auto | length | type = (),
  stroke: stroke = 1pt + black,
);
```


======


A table of items.

Tables are used to arrange content in cells. Cells can contain arbitrary
content, including multiple paragraphs and are specified in row-major order.
For a hands-on explanation of all the ways you can use and customize tables
in Typst, check out the [table guide](https://typst.app/docs/guides/table-guide/).

Because tables are just grids with different defaults for some cell
properties (notably `stroke` and `inset`), refer to the [grid
documentation](https://typst.app/docs/reference/layout/grid/) for more information on how to size the table tracks
and specify the cell appearance properties.

If you are unsure whether you should be using a table or a grid, consider
whether the content you are arranging semantically belongs together as a set
of related data points or similar or whether you are just want to enhance
your presentation by arranging unrelated content in a grid. In the former
case, a table is the right choice, while in the latter case, a grid is more
appropriate. Furthermore, Typst will annotate its output in the future such
that screenreaders will announce content in `table` as tabular while a
grid's content will be announced no different than multiple content blocks
in the document flow.

Note that, to override a particular cell's properties or apply show rules on
table cells, you can use the [`table.cell`](https://typst.app/docs/reference/model/table/#definitions-cell) element. See its
documentation for more information.

Although the `table` and the `grid` share most properties, set and show
rules on one of them do not affect the other.

To give a table a caption and make it [referenceable](https://typst.app/docs/reference/model/ref/), put it into a
[figure].

# Example

The example below demonstrates some of the most common table options.
```typ
#table(
  columns: (1fr, auto, auto),
  inset: 10pt,
  align: horizon,
  table.header(
    [], [*Volume*], [*Parameters*],
  ),
  image("cylinder.svg"),
  $ pi h (D^2 - d^2) / 4 $,
  [
    $h$: height \
    $D$: outer radius \
    $d$: inner radius
  ],
  image("tetrahedron.svg"),
  $ sqrt(2) / 12 a^3 $,
  [$a$: edge length]
)
```

Much like with grids, you can use [`table.cell`](https://typst.app/docs/reference/model/table/#definitions-cell) to customize
the appearance and the position of each cell.

```typ
>>> #set page(width: auto)
>>> #set text(font: "IBM Plex Sans")
>>> #let gray = rgb("#565565")
>>>
#set table(
  stroke: none,
  gutter: 0.2em,
  fill: (x, y) =>
    if x == 0 or y == 0 { gray },
  inset: (right: 1.5em),
)

#show table.cell: it => {
  if it.x == 0 or it.y == 0 {
    set text(white)
    strong(it)
  } else if it.body == [] {
    // Replace empty cells with 'N/A'
    pad(..it.inset)[_N/A_]
  } else {
    it
  }
}

#let a = table.cell(
  fill: green.lighten(60%),
)[A]
#let b = table.cell(
  fill: aqua.lighten(60%),
)[B]

#table(
  columns: 4,
  [], [Exam 1], [Exam 2], [Exam 3],

  [John], [], a, [],
  [Mary], [], a, a,
  [Robert], b, a, b,
)
```


======


A table of items.

Tables are used to arrange content in cells. Cells can contain arbitrary
content, including multiple paragraphs and are specified in row-major order.
For a hands-on explanation of all the ways you can use and customize tables
in Typst, check out the [table guide](https://typst.app/docs/guides/table-guide/).

Because tables are just grids with different defaults for some cell
properties (notably `stroke` and `inset`), refer to the [grid
documentation](https://typst.app/docs/reference/layout/grid/) for more information on how to size the table tracks
and specify the cell appearance properties.

If you are unsure whether you should be using a table or a grid, consider
whether the content you are arranging semantically belongs together as a set
of related data points or similar or whether you are just want to enhance
your presentation by arranging unrelated content in a grid. In the former
case, a table is the right choice, while in the latter case, a grid is more
appropriate. Furthermore, Typst will annotate its output in the future such
that screenreaders will announce content in `table` as tabular while a
grid's content will be announced no different than multiple content blocks
in the document flow.

Note that, to override a particular cell's properties or apply show rules on
table cells, you can use the [`table.cell`](https://typst.app/docs/reference/model/table/#definitions-cell) element. See its
documentation for more information.

Although the `table` and the `grid` share most properties, set and show
rules on one of them do not affect the other.

To give a table a caption and make it [referenceable](https://typst.app/docs/reference/model/ref/), put it into a
[figure].

# Example

The example below demonstrates some of the most common table options.
```typ
#table(
  columns: (1fr, auto, auto),
  inset: 10pt,
  align: horizon,
  table.header(
    [], [*Volume*], [*Parameters*],
  ),
  image("cylinder.svg"),
  $ pi h (D^2 - d^2) / 4 $,
  [
    $h$: height \
    $D$: outer radius \
    $d$: inner radius
  ],
  image("tetrahedron.svg"),
  $ sqrt(2) / 12 a^3 $,
  [$a$: edge length]
)
```

Much like with grids, you can use [`table.cell`](https://typst.app/docs/reference/model/table/#definitions-cell) to customize
the appearance and the position of each cell.

```typ
>>> #set page(width: auto)
>>> #set text(font: "IBM Plex Sans")
>>> #let gray = rgb("#565565")
>>>
#set table(
  stroke: none,
  gutter: 0.2em,
  fill: (x, y) =>
    if x == 0 or y == 0 { gray },
  inset: (right: 1.5em),
)

#show table.cell: it => {
  if it.x == 0 or it.y == 0 {
    set text(white)
    strong(it)
  } else if it.body == [] {
    // Replace empty cells with 'N/A'
    pad(..it.inset)[_N/A_]
  } else {
    it
  }
}

#let a = table.cell(
  fill: green.lighten(60%),
)[A]
#let b = table.cell(
  fill: aqua.lighten(60%),
)[B]

#table(
  columns: 4,
  [], [Exam 1], [Exam 2], [Exam 3],

  [John], [], a, [],
  [Mary], [], a, a,
  [Robert], b, a, b,
)
```

# Rest Parameters

## children

```typc
type: content
```



# Named Parameters

## align

```typc
type: alignment | array | auto | function
```



## column-gutter (named)

```typc
type: array | auto | length | type
```



## columns (named)

```typc
type: array | auto | length | type
```



## fill (named)

```typc
type: color
```



## gutter (named)

```typc
type: array | auto | length | type
```



## inset (named)

```typc
type: inset
```



## row-gutter (named)

```typc
type: array | auto | length | type
```



## rows (named)

```typc
type: array | auto | length | type
```



## stroke (named)

```typc
type: stroke
```




======


[Open docs](https://typst.app/docs/reference/model/table/)

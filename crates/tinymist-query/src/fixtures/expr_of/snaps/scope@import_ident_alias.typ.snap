---
source: crates/tinymist-query/src/analysis.rs
expression: "snap.join(\"\\n\")"
input_file: crates/tinymist-query/src/fixtures/expr_of/import_ident_alias.typ
---
= resolves
ModuleImport(..)@26..53 in \s0.typ -> Module(base)@0..0 in \base.typ, root Module(base)@0..0 in \base.typ, val: None
PathStem(base)@8..18 in \s0.typ -> Module(base)@0..0 in \base.typ, root Module(base)@0..0 in \base.typ, val: None
IdentRef(base)@20..24 in \s0.typ -> PathStem(base)@8..18 in \s0.typ, root Module(base)@0..0 in \base.typ, val: None
IdentRef(base)@55..59 in \s0.typ -> PathStem(base)@8..18 in \s0.typ, root Module(base)@0..0 in \base.typ, val: None
ImportAlias(foo)@50..53 in \s0.typ -> Import(x)@45..46 in \s0.typ, root Select(SelectExpr { lhs: Decl(ModuleImport(..)), key: IdentRef(x) }), val: None
IdentRef(foo)@62..65 in \s0.typ -> ImportAlias(foo)@50..53 in \s0.typ, root Select(SelectExpr { lhs: Decl(ModuleImport(..)), key: IdentRef(x) }), val: None
Import(x)@45..46 in \s0.typ -> Select(SelectExpr { lhs: Decl(ModuleImport(..)), key: IdentRef(x) }), root Select(SelectExpr { lhs: Decl(ModuleImport(..)), key: IdentRef(x) }), val: None
= exports
base -> Ref(RefExpr { decl: PathStem(base), step: Some(Decl(Module(base))), root: Some(Decl(Module(base))), val: None })
foo -> Ref(RefExpr { decl: ImportAlias(foo), step: Some(Decl(Import(x))), root: Some(Select(SelectExpr { lhs: Decl(ModuleImport(..)), key: IdentRef(x) })), val: None })

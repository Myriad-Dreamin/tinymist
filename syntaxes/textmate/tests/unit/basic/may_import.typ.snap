>#let evil_import() = import "base.typ"
#^ source.typst punctuation.definition.hash.typst
# ^^^ source.typst meta.expr.let.typst storage.type.typst
#    ^ source.typst meta.expr.let.typst
#     ^^^^^^^^^^^ source.typst meta.expr.let.typst entity.name.function.typst
#                ^ source.typst meta.expr.let.typst meta.brace.round.typst
#                 ^ source.typst meta.expr.let.typst meta.brace.round.typst
#                  ^ source.typst meta.expr.let.typst
#                   ^ source.typst keyword.operator.assignment.typst
#                    ^ source.typst
#                     ^^^^^^ source.typst variable.other.readwrite.typst
#                           ^ source.typst
#                            ^ source.typst string.quoted.double.typst punctuation.definition.string.typst
#                             ^^^^^^^^ source.typst string.quoted.double.typst
#                                     ^ source.typst string.quoted.double.typst punctuation.definition.string.typst
>#import "base.typ"
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^ source.typst
>#import ("base.typ")
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^^ source.typst
>#import("base.typ")
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst entity.name.function.typst
#       ^ source.typst meta.brace.round.typst
#        ^ source.typst string.quoted.double.typst punctuation.definition.string.typst
#         ^^^^^^^^ source.typst string.quoted.double.typst
#                 ^ source.typst string.quoted.double.typst punctuation.definition.string.typst
#                  ^ source.typst meta.brace.round.typst
>#import "base.typ": *
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^ source.typst
#                    ^ source.typst markup.bold.typst punctuation.definition.bold.typst
>#import "base.typ" as t: *
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^^^^^^ source.typst
#                         ^ source.typst markup.bold.typst punctuation.definition.bold.typst
>#import "base.typ": x
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^^^ source.typst
>#import "base.typ": x as foo
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^^^^^^^^^^ source.typst
>#import "base.typ": x as foo, y
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^^^^^^^^^^^^^ source.typst
>#import "base.typ" as foo
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^^^^^^^ source.typst
>#import "base.typ" as foo: z, x as foo, y as t
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.typst
>#import cetz.draw: *
#^ source.typst punctuation.definition.hash.typst
# ^^^^^^ source.typst variable.other.readwrite.typst
#       ^^^^^^^^^^^^ source.typst
#                   ^ source.typst markup.bold.typst punctuation.definition.bold.typst
>
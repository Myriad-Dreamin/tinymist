$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
scopeName: source.typst
name: typst
patterns:
  - include: '#markup'
repository:
  comments:
    patterns:
      - name: comment.block.typst
        begin: /\*
        end: \*/
        captures:
          '0':
            name: punctuation.definition.comment.typst
        patterns:
          - include: '#comments'
      - name: comment.line.double-slash.typst
        begin: '(?<!:)//'
        end: |+

        beginCaptures:
          '0':
            name: punctuation.definition.comment.typst
        patterns:
          - include: '#comments'
  common:
    patterns:
      - include: '#comments'
      - include: '#fenced_code_block'
      - include: '#inlineRaw'
  markup:
    patterns:
      - include: '#common'
      - include: '#markup-hash'
      - name: constant.character.escape.content.typst
        match: '\\([\\/\[\]{}#*_=~`$-.]|u\{[0-9a-zA-Z]*\}?)'
      - name: punctuation.definition.linebreak.typst
        match: \\
      - name: punctuation.definition.nonbreaking-space.typst
        match: '~'
      - name: punctuation.definition.shy.typst
        match: '-\?'
      - name: punctuation.definition.em-dash.typst
        match: '---'
      - name: punctuation.definition.en-dash.typst
        match: '--'
      - name: punctuation.definition.ellipsis.typst
        match: \.\.\.
      - name: constant.symbol.typst
        match: ':([a-zA-Z0-9]+:)+'
      - name: markup.bold.typst
        begin: (^\*|\*$|((?<=\W|_)\*)|(\*(?=\W|_)))
        end: |-
          (^\*|\*$|((?<=\W|_)\*)|(\*(?=\W|_)))|
          |(?=\])
        captures:
          '0':
            name: punctuation.definition.bold.typst
        patterns:
          - include: '#markup'
      - name: markup.italic.typst
        begin: (^_|_$|((?<=\W|_)_)|(_(?=\W|_)))
        end: |-
          (^_|_$|((?<=\W|_)_)|(_(?=\W|_)))|
          |(?=\])
        captures:
          '0':
            name: punctuation.definition.italic.typst
        patterns:
          - include: '#markup'
      - name: markup.underline.link.typst
        match: 'https?://[0-9a-zA-Z~/%#&='',;\.\+\?]*'
      - name: markup.other.math.typst
        begin: \$
        end: \$
        captures:
          '0':
            name: punctuation.definition.string.math.typst
      - name: markup.heading.typst
        # contentName: entity.name.section.typst
        begin: ^\s*=+\s+
        end: '\n|(?=<)'
        beginCaptures:
          '0':
            name: punctuation.definition.heading.typst
        patterns:
          - include: '#markup'
      - name: punctuation.definition.list.unnumbered.typst
        match: ^\s*-\s+
      - name: punctuation.definition.list.numbered.typst
        match: '^\s*([0-9]*\.|\+)\s+'
      - match: '^\s*(/)\s+([^:]*:)'
        captures:
          '1':
            name: punctuation.definition.list.description.typst
          '2':
            name: markup.list.term.typst
      - name: entity.other.label.typst
        match: '<[[:alpha:]_][[:alnum:]_-]*>'
        captures:
          '1':
            name: punctuation.definition.label.typst
      - name: entity.other.reference.typst
        match: '(@)[[:alpha:]_][[:alnum:]_-]*'
        captures:
          '1':
            name: punctuation.definition.reference.typst
  markup-hash:
    patterns:
      # hash and follows a space
      - match: '(#)\s'
        captures:
          '1':
            name: punctuation.definition.hash.typst
      # hash and follows a empty
      - match: '(#)(;)'
      # hash and follows a code expression
        captures:
          '1':
            name: punctuation.definition.hash.typst
          '2':
            name: punctuation.terminator.statement.typst
      - begin: '#'
        # name: 'markup.expr.typst'
        end: '(?<=;)|(?<=[\)\]\}])(?![;\(\[])|(?=\s)|(;)'
        beginCaptures:
          '0':
            name: punctuation.definition.hash.typst
        endCaptures:
          '1':
            name: punctuation.terminator.statement.typst
        patterns:
          - include: '#code-expr'
  code-expr:
    patterns:
      - include: '#arrowFunc'
      # empty array ()
      - name: meta.array.empty.typst
        match: \(\s*\)
      # empty dictionary (:)
      - name: meta.dictionary.empty.typst
        match: \(\s*:\s*\)
      # parentheisized expressions: (...)
      - begin: \(
        end: \)
        beginCaptures:
          '0':
            name: meta.brace.round.typst
        endCaptures:
          '0':
            name: meta.brace.round.typst
        patterns:
          - include: '#literal-content'
      # bracketed expressions: [...]
      - begin: \[
        end: \]
        beginCaptures:
          '0':
            name: meta.brace.square.typ
        endCaptures:
          '0':
            name: meta.brace.square.typst
        patterns:
          - include: '#markup'
      - name: keyword.control.loop.typst
        match: \b(break|continue)\b
      - name: keyword.operator.word.typst
        match: \b(and|or|not)\b
      - name: keyword.control.flow.typst
        match: \b(return)\b
      - include: '#markupLabel'
      - include: '#fenced_code_block'
      - include: '#inlineRaw'
      - include: '#code-block'
      - include: '#letStatement'
      - include: '#showStatement'
      - include: '#setStatement'
      - include: '#forStatement'
      - include: '#whileStatement'
      - include: '#ifStatement'
      - include: '#importStatement'
      - include: '#includeStatement'
      - include: '#strictFuncCall'
      - include: '#primitiveColors'
      - include: '#primitiveFunctions'
      - include: '#primitiveTypes'
      - include: '#identifier'
      - include: '#constants'
      - match: '(as|in)\b'
        captures:
          '1':
            name: keyword.control.typst
      - name: keyword.operator.accessor.typst
        match: \.
      - name: keyword.operator.arithmetic.typst
        match: '\+|\|/|(?<![[:alpha:]])(?<!\w)(?<!\d)-(?![[:alnum:]-][[:alpha:]_])'
      - name: keyword.operator.relational.typst
        match: ==|!=|<=|<|>=|>
      - begin: '(\+=|-=|\*=|/=|=)'
        end: '(?=\n)|(?=\))|(?=;)|(?=])|(?=\})'
        beginCaptures:
          '1':
            name: keyword.operator.assignment.typst
        patterns:
          - include: '#code-expr'
  code-block:
    patterns:
      # brace expressions: {...}
      - begin: \{
        end: (\})
        beginCaptures:
          '0':
            name: meta.brace.curly.typst
        endCaptures:
          '1':
            name: meta.brace.curly.typst
        patterns:
          - include: '#code'
  pattern-binding-assign:
    patterns:
      - begin: '\('
        end: '(\))\s*(=)\s*'
        beginCaptures:
          '0':
            name: meta.brace.round.typst
        endCaptures:
          '1':
            name: meta.brace.round.typst
          '2':
            name: keyword.operator.assignment.typst
        patterns:
          - include: '#pattern-binding-items'
      - include: '#code-expr'
  pattern-binding-items:
    patterns:
      # rest binding
      - match: '(\.\.)(\b[\p{XID_Start}_][\p{XID_Continue}_-]*)?'
        # debugging
        # name: block.pattern-binding.typst
        captures:
          '1':
            name: keyword.operator.range.typst
          '2':
            name: variable.other.readwrite.typst
      # recursive binding
      - begin: '\('
        end: '\)'
        beginCaptures:
          '0':
            name: meta.brace.round.typst
        endCaptures:
          '0':
            name: meta.brace.round.typst
        patterns:
          - include: '#pattern-binding-items'
      # parameter binding
      - include: '#primitiveTypes'
      - include: '#identifier'
      - name: punctuation.separator.colon.typst
        match: ':'
      - name: punctuation.separator.comma.typst
        match: ','
  literal-content:
    patterns:
      - include: '#code-expr'
      - name: punctuation.separator.colon.typst
        match: ':'
      - name: punctuation.separator.comma.typst
        match: ','
  code-params:
    patterns:
      - name: meta.parameter.binding.typst
        include: '#pattern-binding-items'
      - name: punctuation.separator.colon.typst
        match: ':'
      - name: punctuation.separator.comma.typst
        match: ','
  code:
    patterns:
      - include: '#common'
      - name: comment.line.double-slash.typst
        begin: //
        end: |+

        beginCaptures:
          '0':
            name: punctuation.definition.comment.typst
      - name: punctuation.separator.colon.typst
        match: ';'
      - include: '#code-expr'
  constants:
    patterns:
      - name: constant.language.none.typst
        match: (?<!\)|\]|\})\bnone\b
      - name: constant.language.auto.typst
        match: (?<!\)|\]|\})\bauto\b
      - name: constant.language.boolean.typst
        match: (?<!\)|\]|\})\b(true|false)\b
      - name: constant.numeric.length.typst
        match: '(?<!\)|\]|\})\b(\d*)?\.?\d+([eE][+-]?\d+)?(mm|pt|cm|in|em)\b'
      - name: constant.numeric.angle.typst
        match: '(?<!\)|\]|\})\b(\d*)?\.?\d+([eE][+-]?\d+)?(rad|deg)\b'
      - name: constant.numeric.percentage.typst
        match: '(?<!\)|\]|\})\b(\d*)?\.?\d+([eE][+-]?\d+)?%'
      - name: constant.numeric.fr.typst
        match: '(?<!\)|\]|\})\b(\d*)?\.?\d+([eE][+-]?\d+)?fr'
      - name: constant.numeric.integer.typst
        match: (?<!\)|\]|\})\b\d+\b
      - name: constant.numeric.float.typst
        match: '(?<!\)|\]|\})\b(\d*)?\.?\d+([eE][+-]?\d+)?\b'
      - include : '#stringLiteral'
      - name: markup.other.math.typst
        begin: \$
        end: \$
        captures:
          '0':
            name: punctuation.definition.string.math.typst
  fenced_code_block:
    patterns:
      - include: '#blockRawGeneral'

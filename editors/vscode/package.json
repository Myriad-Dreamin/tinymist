{
  "name": "tinymist",
  "version": "0.13.6",
  "description": "An integrated language service for Typst",
  "keywords": [
    "typst",
    "lsp",
    "language-server"
  ],
  "categories": [
    "Programming Languages",
    "Formatters"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Myriad-Dreamin/tinymist.git"
  },
  "displayName": "Tinymist Typst",
  "author": "Myriad-Dreamin",
  "contributors": [
    "Myriad-Dreamin",
    "Nathan Varner"
  ],
  "publisher": "myriad-dreamin",
  "license": "Apache-2.0",
  "engines": {
    "vscode": "^1.97.0"
  },
  "main": "./out/extension.js",
  "browser": "./out/extension.web.js",
  "icon": "./icons/ti-white.png",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "tinymist-activitybar",
          "title": "Tinymist",
          "icon": "./icons/ti.png"
        }
      ]
    },
    "views": {
      "tinymist-activitybar": [
        {
          "id": "tinymist.side-symbol-view",
          "type": "webview",
          "name": "Symbol",
          "when": "ext.tinymistActivated"
        },
        {
          "id": "tinymist.dev-kit",
          "name": "DevKit View",
          "when": "ext.tinymistActivated && ext.tinymistDevKit"
        },
        {
          "id": "tinymist.tool-view",
          "name": "Tool",
          "when": "ext.tinymistActivated"
        },
        {
          "id": "tinymist.package-view",
          "name": "Package",
          "when": "ext.tinymistActivated"
        },
        {
          "id": "tinymist.preview.content-preview",
          "type": "webview",
          "name": "Content",
          "when": "ext.tinymistActivated"
        },
        {
          "id": "tinymist.label-view",
          "name": "Label",
          "when": "ext.tinymistActivated"
        },
        {
          "id": "tinymist.preview.outline",
          "name": "Outline",
          "when": "ext.tinymistActivated"
        }
      ]
    },
    "taskDefinitions": [
      {
        "type": "typst",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "default": "export",
            "description": "The command to run.",
            "enum": [
              "export"
            ],
            "enumDescriptions": [
              "Export the document to specific format."
            ]
          },
          "export": {
            "type": "object",
            "description": "Arguments for `export` command.",
            "properties": {
              "format": {
                "description": "The format(s) to export the document to. Defaults to `pdf`.",
                "oneOf": [
                  {
                    "type": "string",
                    "description": "The format to export the document to.",
                    "enum": [
                      "pdf",
                      "png",
                      "svg",
                      "html",
                      "markdown",
                      "text",
                      "query",
                      "pdfpc"
                    ],
                    "enumDescriptions": [
                      "PDF",
                      "PNG",
                      "SVG",
                      "HTML",
                      "Markdown",
                      "Plain Text",
                      "Query Result",
                      "Pdfpc (From Query)"
                    ],
                    "default": "pdf"
                  },
                  {
                    "type": "array",
                    "description": "The formats to export the document to.",
                    "items": {
                      "type": "string",
                      "description": "The format to export the document to. Defaults to `pdf`.",
                      "enum": [
                        "pdf",
                        "png",
                        "svg",
                        "html",
                        "markdown",
                        "text",
                        "query",
                        "pdfpc"
                      ],
                      "enumDescriptions": [
                        "PDF",
                        "PNG",
                        "SVG",
                        "HTML",
                        "Markdown",
                        "Plain Text",
                        "Query Result",
                        "Pdfpc (From Query)"
                      ],
                      "default": "pdf"
                    }
                  }
                ]
              },
              "inputPath": {
                "title": "Input path",
                "description": "The path pattern to the entry file (main) for compilation, you can use `$focused`, `$root`, `$dir`, `$name` to do magic configuration, e.g. `$dir/$name` (default) and `$root/target/$dir/$name`. A special value `$focused` is used to point to the currently focused file in the editor.",
                "type": "string",
                "default": "$focused"
              },
              "metadata": {
                "type": "boolean",
                "description": "Whether to generate metadata containing export arguments."
              },
              "pdf.creationTimestamp": {
                "type": [
                  "string"
                ],
                "description": "The unix timestamp of the PDF creation. If not specified, the current time is used."
              },
              "png.ppi": {
                "type": "number",
                "description": "The PPI (pixels per inch) to use for PNG export",
                "default": 144
              },
              "fill": {
                "type": "string",
                "description": "The fill color. Affected formats: `png`",
                "examples": [
                  "white",
                  "#ffffff",
                  "#00000000"
                ]
              },
              "png.fill": {
                "type": "string",
                "description": "The fill color. Affected formats: `png`",
                "examples": [
                  "white",
                  "#ffffff",
                  "#00000000"
                ],
                "default": "white"
              },
              "merged": {
                "type": "boolean",
                "description": "Merge the pages into a single image. Affected formats: `png`, `svg`"
              },
              "svg.merged": {
                "type": "boolean",
                "description": "Merge the pages into a single SVG. Affected formats: `svg`"
              },
              "png.merged": {
                "type": "boolean",
                "description": "Merge the pages into a single PNG. Affected formats: `png`"
              },
              "merged.gap": {
                "type": "string",
                "description": "The gap between the pages when merging **with absolute typst unit**. Affected formats: `png`, `svg`",
                "default": "0pt"
              },
              "svg.merged.gap": {
                "type": "string",
                "description": "The gap between the pages when merging **with absolute typst unit**. Affected formats: `svg`",
                "default": "0pt"
              },
              "png.merged.gap": {
                "type": "string",
                "description": "The gap between the pages when merging **with absolute typst unit**. Affected formats: `png`",
                "default": "0pt"
              },
              "query.format": {
                "type": "string",
                "description": "The format of the query output. Defaults to `json`.",
                "default": "json",
                "enum": [
                  "json",
                  "yaml",
                  "txt"
                ],
                "enumDescriptions": [
                  "JSON",
                  "YAML",
                  "Plain Text if the result is a string, otherwise raises an error. You may specific the field to use for the query with `query.field` and assert that there is only one result with `query.one`."
                ]
              },
              "query.outputExtension": {
                "type": "string",
                "description": "The extension of the query output. Inferring from `query.format` if not specified."
              },
              "query.strict": {
                "type": "boolean",
                "description": "Whether to strictly check the query format. Defaults to `true`."
              },
              "query.pretty": {
                "type": "boolean",
                "description": "Whether to pretty print the query output. Defaults to `true`."
              },
              "query.selector": {
                "type": "string",
                "description": "The selector to use for the query. Must specified if `format`."
              },
              "query.field": {
                "type": "string",
                "description": "The field to use for the query."
              },
              "query.one": {
                "type": "boolean",
                "description": "Whether to only return one result. Defaults to `false`."
              }
            }
          }
        }
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Tinymist Typst LSP",
      "properties": {
        "tinymist.projectResolution": {
          "type": "string",
          "default": "singleFile",
          "markdownDescription": "This configuration specifies the way to resolved projects.",
          "enum": [
            "singleFile",
            "lockDatabase"
          ],
          "enumDescriptions": [
            "Manage typst documents like what we did in Markdown. Each single file is an individual document and no project resolution is needed.",
            "Manage typst documents like what we did in Rust. For each workspace, tinymist tracks your preview and compilation history, and stores the information in a lock file. Tinymist will automatically selects the main file to use according to the lock file. This also allows other tools push preview and export tasks to language server by updating the lock file."
          ]
        },
        "tinymist.outputPath": {
          "title": "Output path",
          "description": "The path pattern to store Typst artifacts, you can use `$root` or `$dir` or `$name` to do magic configuration, e.g. `$dir/$name` (default) and `$root/target/$dir/$name`.",
          "type": "string",
          "default": ""
        },
        "tinymist.exportTarget": {
          "title": "Export target",
          "description": "The target to export the document to. Defaults to `paged`. Note: you can still export pdf when it is set to `html`. This configuration only affects how the language server completes your code.",
          "type": "string",
          "default": "paged",
          "enum": [
            "paged",
            "html"
          ],
          "enumDescriptions": [
            "The current export target is for PDF, PNG, and SVG export.",
            "The current export target is for HTML export."
          ]
        },
        "tinymist.exportPdf": {
          "title": "Export PDF",
          "description": "The extension can export PDFs of your Typst files. This setting controls whether this feature is enabled and how often it runs.",
          "type": "string",
          "default": "never",
          "enum": [
            "never",
            "onSave",
            "onType",
            "onDocumentHasTitle"
          ],
          "enumDescriptions": [
            "Never export PDFs, you will manually run typst.",
            "Export PDFs when you save a file.",
            "Export PDFs as you type in a file.",
            "Export PDFs when a document has a title (and save a file), which is useful to filter out template files."
          ]
        },
        "tinymist.rootPath": {
          "title": "Root path",
          "markdownDescription": "Configure the root for absolute paths in typst. Hint: you can set the rootPath to `-`, so that tinymist will always use parent directory of the file as the root path. Note: for neovim users, if it complains root not found, you must set `require(\"lspconfig\")[\"tinymist\"].setup { root_dir }` as well, see [tinymist#528](https://github.com/Myriad-Dreamin/tinymist/issues/528).",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "tinymist.configureDefaultWordSeparator": {
          "title": "Configure default word separators",
          "description": "Whether to configure default word separators on startup",
          "type": "string",
          "default": "disable",
          "enum": [
            "enable",
            "disable"
          ],
          "enumDescriptions": [
            "Override the default word separators on startup",
            "Do not override the default word separators on startup"
          ]
        },
        "tinymist.semanticTokens": {
          "title": "Semantic tokens mode",
          "description": "Enable or disable semantic tokens (LSP syntax highlighting)",
          "type": "string",
          "default": "enable",
          "enum": [
            "enable",
            "disable"
          ],
          "enumDescriptions": [
            "Use semantic tokens for syntax highlighting",
            "Do not use semantic tokens for syntax highlighting"
          ]
        },
        "tinymist.typingContinueCommentsOnNewline": {
          "title": "Continue Comments on Newline",
          "markdownDescription": "Whether to prefix newlines after comments with the corresponding comment prefix.",
          "type": "boolean",
          "default": true
        },
        "tinymist.onEnterEvent": {
          "title": "Handling on enter events",
          "description": "Enable or disable [experimental/onEnter](https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/lsp-extensions.md#on-enter) (LSP onEnter feature) to allow automatic insertion of characters on enter, such as `///` for comments. Note: restarting the editor is required to change this setting.",
          "type": "boolean",
          "default": true
        },
        "tinymist.systemFonts": {
          "title": "Whether to load system fonts for Typst compiler",
          "description": "A flag that determines whether to load system fonts for Typst compiler, which is useful for ensuring reproducible compilation. If set to null or not set, the extension will use the default behavior of the Typst compiler. Note: You need to restart LSP to change this options. ",
          "type": "boolean",
          "default": true
        },
        "tinymist.fontPaths": {
          "title": "Font paths for Typst compiler",
          "description": "A list of file or directory path to fonts. Note: The configuration source in higher priority will **override** the configuration source in lower priority. The order of precedence is: Configuration `tinymist.fontPaths` > Configuration `tinymist.typstExtraArgs.fontPaths` > LSP's CLI Argument `--font-path` > The environment variable `TYPST_FONT_PATHS` (a path list separated by `;` (on Windows) or `:` (Otherwise)). Note: If the path to fonts is a relative path, it will be resolved based on the root directory. Note: In VSCode, you can use VSCode variables in the path, e.g. `${workspaceFolder}/fonts`.",
          "type": [
            "array",
            "null"
          ],
          "default": null
        },
        "tinymist.compileStatus": {
          "title": "Show/Report Compile Status",
          "description": "In VSCode, enable compile status meaning that the extension will show the compilation status in the status bar. Since Neovim and Helix don't have a such feature, it is disabled by default at the language server label.",
          "type": "string",
          "default": "enable",
          "enum": [
            "enable",
            "disable"
          ]
        },
        "tinymist.statusBarFormat": {
          "title": "Format of the Server Status in the Status Bar",
          "markdownDescription": "Set format string of the server status. For example, `{compileStatusIcon}{wordCount} [{fileName}]` will format the status as `$(check) 123 words [main]`. Valid placeholders are:\n\n- `{compileStatusIcon}`: Icon indicating the compile status\n- `{wordCount}`: Number of words in the document\n- `{fileName}`: Name of the file being compiled\n\nNote: The status bar will be hidden if the format string is empty.",
          "type": "string",
          "default": "{compileStatusIcon} {wordCount} [{fileName}]"
        },
        "tinymist.typstExtraArgs": {
          "title": "Specifies the arguments for Typst as same as typst-cli",
          "description": "You can pass any arguments as you like, and we will try to follow behaviors of the **same version** of typst-cli. Note: the arguments may be overridden by other settings. For example, `--font-path` will be overridden by `tinymist.fontPaths`.",
          "type": "array",
          "items": {
            "type": "string",
            "title": "arguments in order",
            "description": "The arguments for Typst as same as typst-cli."
          },
          "default": []
        },
        "tinymist.serverPath": {
          "title": "Path to server executable",
          "description": "The extension can use a local tinymist executable instead of the one bundled with the extension. This setting controls the path to the executable. The string \"tinymist\" means look up Tinymist in PATH.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "tinymist.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        },
        "tinymist.formatterMode": {
          "title": "Enable Experimental Formatter",
          "description": "The extension can format Typst files using typstfmt or typstyle.",
          "type": "string",
          "default": "disable",
          "enum": [
            "disable",
            "typstyle",
            "typstfmt"
          ],
          "enumDescriptions": [
            "Formatter is not activated.",
            "Use typstyle formatter.",
            "Use typstfmt formatter."
          ]
        },
        "tinymist.formatterPrintWidth": {
          "title": "Set formatter's (unsigned) print width",
          "description": "Sets the print width for the formatter, which is a **soft limit** of characters per line. See [the definition of *Print Width*](https://prettier.io/docs/en/options.html#print-width). Note: this has lower priority than the formatter's specific configurations.",
          "type": "number",
          "default": 120
        },
        "tinymist.formatterIndentSize": {
          "title": "Set formatter's (unsigned) tab spaces",
          "description": "Sets the indent size (using space) for the formatter.",
          "type": "number",
          "default": 2
        },
        "tinymist.showExportFileIn": {
          "title": "(Experimental) Show Exported Files in Some Place",
          "description": "Configures way of opening exported files, e.g. inside of editor tabs or using system application.",
          "anyOf": [
            {
              "type": "string",
              "description": "For all kind of files.",
              "enum": [
                "editorTab",
                "systemDefault"
              ],
              "default": "editorTab",
              "enumDescriptions": [
                "Show the exported files in editor tabs.",
                "Show the exported files by system default application."
              ]
            }
          ]
        },
        "tinymist.dragAndDrop": {
          "title": "Drag and Drop",
          "description": "Whether to handle drag-and-drop of resources into the editing typst document. Note: restarting the editor is required to change this setting.",
          "type": "string",
          "default": "enable",
          "enum": [
            "enable",
            "disable"
          ]
        },
        "tinymist.copyAndPaste": {
          "title": "Copy and Paste",
          "description": "Whether to handle paste of resources into the editing typst document. Note: restarting the editor is required to change this setting.",
          "type": "string",
          "default": "enable",
          "enum": [
            "enable",
            "disable"
          ]
        },
        "tinymist.renderDocs": {
          "title": "(Experimental) Render Docs",
          "description": "(Experimental) Whether to render typst elements in (hover) docs. In VS Code, when this feature is enabled, tinymist will store rendered results in the filesystem's temporary storage to show them in the hover content. Note: Please disable this feature if the editor doesn't support/handle image previewing in docs.",
          "type": "string",
          "default": "enable",
          "enum": [
            "enable",
            "disable"
          ]
        },
        "tinymist.completion.triggerOnSnippetPlaceholders": {
          "title": "Trigger LSP Completion on Snippet Placeholders",
          "markdownDescription": "Whether to trigger completions on arguments (placeholders) of snippets. For example, `box` will be completed to `box(|)`, and server will request the editor (lsp client) to request completion after moving cursor to the placeholder in the snippet. Note: this has no effect if the editor doesn't support `editor.action.triggerSuggest` or `tinymist.triggerSuggestAndParameterHints` command. Hint: Restarting the editor is required to change this setting.",
          "type": "boolean",
          "default": false
        },
        "tinymist.completion.postfix": {
          "title": "Enable Postfix Code Completion",
          "markdownDescription": "Whether to enable postfix code completion. For example, `[A].box|` will be completed to `box[A]|`. Hint: Restarting the editor is required to change this setting.",
          "type": "boolean",
          "default": true
        },
        "tinymist.completion.postfixUfcs": {
          "title": "Completion: Convert Field Access to Call",
          "markdownDescription": "Whether to enable UFCS-style completion. For example, `[A].box|` will be completed to `box[A]|`. Hint: Restarting the editor is required to change this setting.",
          "type": "boolean",
          "default": true
        },
        "tinymist.completion.postfixUfcsLeft": {
          "title": "Completion: Convert Field Access to Call (Left Variant)",
          "markdownDescription": "Whether to enable left-variant UFCS-style completion. For example, `[A].table|` will be completed to `table(|)[A]`. Hint: Restarting the editor is required to change this setting.",
          "type": "boolean",
          "default": true
        },
        "tinymist.completion.postfixUfcsRight": {
          "title": "Completion: Convert Field Access to Call (Right Variant)",
          "description": "Whether to enable right-variant UFCS-style completion. For example, `[A].table|` will be completed to `table([A], |)`. Hint: Restarting the editor is required to change this setting.",
          "type": "boolean",
          "default": true
        },
        "tinymist.previewFeature": {
          "title": "Enable preview features",
          "description": "Enable or disable preview features of Typst. Note: restarting the editor is required to change this setting.",
          "type": "string",
          "default": "enable",
          "enum": [
            "enable",
            "disable"
          ]
        },
        "tinymist.preview.sysInputs": {
          "type": "object",
          "items": {
            "type": "string"
          },
          "default": {},
          "description": "key-value pairs visible through `sys.inputs`, corresponds to `--input` argument of typst cli",
          "markdownDeprecationMessage": "The configuration item is ignored. Please see `tinymist.typstExtraArgs` for inputs."
        },
        "tinymist.preview.systemFonts": {
          "type": "boolean",
          "default": true,
          "description": "Whether to load system fonts. If disabled, only fonts in `typst-preview.fontPaths` is loaded",
          "markdownDeprecationMessage": "The configuration item is ignored. Please use `tinymist.systemFonts` instead."
        },
        "tinymist.preview.fontPaths": {
          "type": "array",
          "items": {
            "type": "string",
            "title": "Font path",
            "description": "Absolute path to a directory or file containing font assets."
          },
          "default": [],
          "description": "List of *additional* paths to font assets used by typst-preview.",
          "markdownDeprecationMessage": "The configuration item is ignored. Please use `tinymist.fontPaths` instead."
        },
        "tinymist.preview.refresh": {
          "title": "Refresh preview",
          "description": "Refresh preview when the document is saved or when the document is changed",
          "type": "string",
          "enum": [
            "onSave",
            "onType"
          ],
          "default": "onType",
          "enumDescriptions": [
            "Refresh preview on save",
            "Refresh preview on type"
          ]
        },
        "tinymist.preview.scrollSync": {
          "description": "Configure scroll sync mode.",
          "type": "string",
          "enum": [
            "never",
            "onSelectionChangeByMouse",
            "onSelectionChange"
          ],
          "default": "onSelectionChangeByMouse",
          "enumDescriptions": [
            "Disable automatic scroll sync",
            "Scroll preview to current cursor position when selection changes by mouse",
            "Scroll preview to current cursor position when selection changes by mouse or keyboard (any source)"
          ]
        },
        "tinymist.preview.partialRendering": {
          "description": "Only render visible part of the document. This can improve performance but still being experimental.",
          "type": "boolean",
          "default": true
        },
        "tinymist.preview.invertColors": {
          "description": "Invert colors of the preview (useful for dark themes without cost). Please note you could see the origin colors when you hover elements in the preview. It is also possible to specify strategy to each element kind by an object map in JSON format.",
          "anyOf": [
            {
              "type": "string",
              "description": "Specify a strategy for all elements in the preview.",
              "enum": [
                "never",
                "auto",
                "always"
              ],
              "default": "never",
              "enumDescriptions": [
                "Disable color inversion of the preview",
                "Invert colors smartly by detecting dark/light themes in browser environment or by `typst query` your document",
                "Always invert colors of the preview"
              ]
            },
            {
              "type": "object",
              "description": "Specify strategies for each element kind",
              "default": {},
              "properties": {
                "rest": {
                  "type": "string",
                  "enum": [
                    "never",
                    "auto",
                    "always"
                  ],
                  "description": "Specify a strategy for rest elements in the preview",
                  "default": "never",
                  "enumDescriptions": [
                    "Disable color inversion of the preview",
                    "Invert colors smartly by detecting dark/light themes in browser environment or by `typst query` your document",
                    "Always invert colors of the preview"
                  ]
                },
                "image": {
                  "type": "string",
                  "enum": [
                    "never",
                    "auto",
                    "always"
                  ],
                  "description": "Specify a strategy for images in the preview",
                  "default": "never",
                  "enumDescriptions": [
                    "Disable color inversion of the preview",
                    "Invert colors smartly by detecting dark/light themes in browser environment or by `typst query` your document",
                    "Always invert colors of the preview"
                  ]
                }
              }
            }
          ]
        },
        "tinymist.preview.cursorIndicator": {
          "description": "(Experimental) Show typst cursor indicator in preview.",
          "type": "boolean",
          "default": false
        },
        "tinymist.preview.pinPreviewFile": {
          "description": "Declare current previewing file as entrypoint for typst-lsp or tinymist. This will make typst-lsp or tinymist to use this file as entrypoint instead of the file opened in vscode. This can improve diagnostics messages and auto completion but still being experimental.",
          "type": "boolean",
          "default": false,
          "markdownDeprecationMessage": "This setting is deprecated and no longer needed. The extension will always pin the previewed file as the entrypoint for the language server."
        }
      }
    },
    "configurationDefaults": {
      "[typst][typst-code]": {
        "editor.wordWrap": "on",
        "editor.semanticHighlighting.enabled": true,
        "editor.tabSize": 2,
        "editor.inlayHints.enabled": "off"
      }
    },
    "languages": [
      {
        "id": "toml",
        "extensions": [
          "tinymist.lock"
        ]
      },
      {
        "id": "typst",
        "configuration": "./syntaxes/language-configuration.json",
        "extensions": [
          ".typ"
        ],
        "aliases": [
          "Typst",
          "typst",
          "typ"
        ],
        "firstLine": "^#!/.*\\b(typst)[0-9.-]*\\b",
        "icon": {
          "light": "./icons/typst-small.png",
          "dark": "./icons/typst-small.png"
        }
      },
      {
        "id": "typst-code",
        "configuration": "./syntaxes/language-configuration.json",
        "extensions": [
          ".typc"
        ],
        "aliases": [
          "Typst (Code Mode)",
          "typc"
        ],
        "icon": {
          "light": "./icons/typst-small.png",
          "dark": "./icons/typst-small.png"
        }
      },
      {
        "id": "typst-markdown-injection"
      }
    ],
    "grammars": [
      {
        "language": "typst",
        "scopeName": "source.typst",
        "path": "./out/typst.tmLanguage.json",
        "balancedBracketScopes": [
          "meta.expr",
          "meta.brace",
          "markup.math.typst"
        ],
        "unbalancedBracketScopes": [
          "markup.content.brace.typst",
          "markup.raw.block.typst",
          "markup.raw.inline.typst",
          "string.other.label.typst",
          "string.quoted.double.typst",
          "constant.other.symbol.typst",
          "constant.character.escape",
          "comment.block.typst",
          "comment.line.double-slash.typst"
        ]
      },
      {
        "language": "typst-code",
        "scopeName": "source.typst-code",
        "path": "./out/typst-code.tmLanguage.json",
        "balancedBracketScopes": [
          "meta.expr",
          "meta.brace",
          "markup.math.typst"
        ],
        "unbalancedBracketScopes": [
          "markup.content.brace.typst",
          "markup.raw.block.typst",
          "markup.raw.inline.typst",
          "string.other.label.typst",
          "string.quoted.double.typst",
          "constant.other.symbol.typst",
          "constant.character.escape",
          "comment.block.typst",
          "comment.line.double-slash.typst"
        ]
      },
      {
        "language": "typst-markdown-injection",
        "scopeName": "markdown.typst.codeblock",
        "path": "./syntaxes/typst-markdown-injection.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.typst": "typst",
          "meta.embedded.block.typst-code": "typst-code"
        }
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "bool",
        "description": "A boolean literal"
      },
      {
        "id": "punct",
        "description": "Punctuation in code"
      },
      {
        "id": "escape",
        "description": "Escape sequence"
      },
      {
        "id": "link",
        "description": "Hyperlink"
      },
      {
        "id": "raw",
        "description": "Raw text"
      },
      {
        "id": "label",
        "description": "Label"
      },
      {
        "id": "ref",
        "description": "Reference to a label"
      },
      {
        "id": "heading",
        "description": "Heading"
      },
      {
        "id": "marker",
        "description": "List, enum, or term list marker"
      },
      {
        "id": "term",
        "description": "Term in a term list"
      },
      {
        "id": "delim",
        "description": "Delimiter of a different type of markup"
      },
      {
        "id": "pol",
        "description": "Interpolated variable"
      },
      {
        "id": "error",
        "description": "Syntax error"
      },
      {
        "id": "text",
        "description": "Text"
      }
    ],
    "semanticTokenModifiers": [
      {
        "id": "math",
        "description": "Math mode markup"
      },
      {
        "id": "strong",
        "description": "Strong (usually bolded) text"
      },
      {
        "id": "emph",
        "description": "Emphasized (usually italicized) text"
      }
    ],
    "semanticTokenScopes": [
      {
        "language": "typst",
        "scopes": {
          "*.strong.emph": [
            "markup.bold.typst markup.italic.typst"
          ],
          "*.strong": [
            "markup.bold.typst"
          ],
          "*.emph": [
            "markup.italic.typst"
          ],
          "*.math": [
            "markup.math.typst"
          ],
          "bool": [
            "constant.language.boolean.typst"
          ],
          "punct": [
            "punctuation.typst",
            "punctuation.definition.typst"
          ],
          "escape": [
            "constant.character.escape.typst",
            "keyword.operator.typst",
            "punctuation.definition.typst"
          ],
          "link": [
            "markup.underline.link.typst"
          ],
          "raw": [
            "markup.other.raw.typst"
          ],
          "delim.math": [
            "punctuation.definition.math.typst",
            "punctuation.definition.string.end.math.typst",
            "string.quoted.other.typst"
          ],
          "operator.math": [
            "keyword.operator.math.typst"
          ],
          "heading": [
            "markup.heading.typst"
          ],
          "marker": [
            "markup.list.typst punctuation.definition.list.begin.typst",
            "markup.list.typst",
            "punctuation.definition.list.begin.typst"
          ],
          "term": [
            "markup.list.term.typst",
            "markup.bold.term.typst"
          ],
          "label": [
            "string.other.link.title.typst",
            "entity.name.label.typst",
            "meta.link.inline.typst",
            "markup.underline.link.typst"
          ],
          "ref": [
            "string.other.link.typst",
            "markup.other.reference.typst",
            "entity.name.label.typst",
            "meta.link.inline.typst",
            "markup.underline.link.typst"
          ],
          "pol": [
            "meta.interpolation.typst",
            "variable.typst"
          ],
          "error": [
            "invalid.typst"
          ]
        }
      }
    ],
    "commands": [
      {
        "command": "tinymist.exportCurrentPdf",
        "title": "Export the Opened File as PDF",
        "category": "Typst"
      },
      {
        "command": "tinymist.pinMainToCurrent",
        "title": "Pin the Main file to the Opening Document",
        "category": "Typst"
      },
      {
        "command": "tinymist.unpinMain",
        "title": "Unpin the main file",
        "category": "Typst"
      },
      {
        "command": "tinymist.showPdf",
        "title": "Show exported PDF",
        "category": "Typst",
        "icon": "$(file-pdf)"
      },
      {
        "command": "tinymist.copyAnsiHighlight",
        "title": "Copy as ANSI Code",
        "category": "Typst"
      },
      {
        "command": "tinymist.showLog",
        "title": "Tinymist: Show Log",
        "description": "Show log of the language server",
        "category": "Typst",
        "icon": "$(list-flat)"
      },
      {
        "command": "tinymist.restartServer",
        "title": "Restart server",
        "category": "Typst"
      },
      {
        "command": "tinymist.clearCache",
        "title": "Clear all Cached Resources",
        "category": "Typst"
      },
      {
        "command": "tinymist.initTemplate",
        "title": "Initialize a New Typst Project based on a Template",
        "category": "Typst"
      },
      {
        "command": "tinymist.initTemplateInPlace",
        "title": "Insert the Content of Template Entry in Place",
        "category": "Typst"
      },
      {
        "command": "tinymist.showTemplateGallery",
        "title": "Show Available Typst Templates (Gallery) for Picking up a Template to Initialize",
        "category": "Typst"
      },
      {
        "command": "tinymist.createLocalPackage",
        "title": "Create Typst Local Package",
        "category": "Typst"
      },
      {
        "command": "tinymist.openLocalPackage",
        "title": "Open Typst Local Package",
        "category": "Typst"
      },
      {
        "command": "tinymist.showSummary",
        "title": "Show current document summary",
        "category": "Typst"
      },
      {
        "command": "tinymist.showSymbolView",
        "title": "Show Symbol View",
        "category": "Typst"
      },
      {
        "command": "tinymist.showFontView",
        "title": "Show Font View",
        "category": "Typst"
      },
      {
        "command": "tinymist.profileCurrentFile",
        "title": "Profile and visualize execution of the current Typst file",
        "category": "Typst"
      },
      {
        "command": "tinymist.syncLabel",
        "title": "Scan workspace and collect all labels again",
        "icon": "$(extensions-sync-enabled)",
        "category": "Typst"
      },
      {
        "command": "tinymist.browsingPreview",
        "title": "Tinymist: Browsing Preview",
        "description": "Open a preview panel to browsing through documents. The preview panel will pick a main file when switching between files. By default, every single file is a document. This doesn't work well with multiple-files projects. To allow tinymist learn the structure of your projects, please configure `tinymist.projectResolution` as `lockDatabase`.",
        "icon": "$(open-preview)"
      },
      {
        "command": "typst-preview.preview",
        "title": "Typst Preview: Preview Opened File",
        "description": "Launch typst-preview server",
        "icon": "$(open-preview)",
        "when": "resourceLangId == typst && editorTextFocus"
      },
      {
        "command": "typst-preview.browser",
        "title": "Typst Preview: Preview Opened File in Browser",
        "description": "Launch typst-preview server and open the preview in your browser",
        "icon": "$(open-preview)",
        "when": "resourceLangId == typst && editorTextFocus"
      },
      {
        "command": "typst-preview.preview-slide",
        "title": "Typst Preview: Preview Opened File in Slide Mode",
        "description": "Launch typst-preview server in slide mode",
        "icon": "$(open-preview)",
        "when": "resourceLangId == typst && editorTextFocus"
      },
      {
        "command": "typst-preview.browser-slide",
        "title": "Typst Preview: Preview Opened file in Browser and Slide Mode",
        "description": "Launch typst-preview server in slide mode and open the preview in your browser",
        "icon": "$(open-preview)",
        "when": "resourceLangId == typst && editorTextFocus"
      },
      {
        "command": "typst-preview.sync",
        "title": "Typst Preview: Sync Preview with Current Cursor",
        "description": "Scroll preview to current cursor position",
        "icon": "$(sync)",
        "when": "resourceLangId == typst && editorTextFocus"
      },
      {
        "command": "typst-preview.noteOutline",
        "title": "Note: Jumping to source location of the outline item doesn't work well if its body doesn't have source location, e.g.\n```\n#let my-heading(h) = heading(h) // will jump to here\n#my-heading(\"Title\") // will not jump to here\n```.\nHence, you may want to use `my-heading[Title]` instead to gain better experience of outline jumping.",
        "description": "...",
        "icon": "$(extensions-info-message)"
      }
    ],
    "keybindings": [
      {
        "command": "tinymist.onEnter",
        "key": "enter",
        "when": "editorTextFocus && !editorReadonly && editorLangId == typst && !suggestWidgetVisible && !editorHasMultipleSelections && vim.mode != 'Normal' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && vim.mode != 'SearchInProgressMode' && vim.mode != 'CommandlineInProgress' && vim.mode != 'Replace' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'SurroundInputMode'"
      },
      {
        "command": "typst-preview.preview",
        "key": "ctrl+k v",
        "mac": "cmd+k v",
        "when": "editorLangId == typst"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "tinymist.exportCurrentPdf",
          "when": "editorLangId == typst"
        },
        {
          "command": "tinymist.clearCache",
          "when": "editorLangId == typst"
        },
        {
          "command": "tinymist.restartServer",
          "when": "ext.tinymistActivated"
        }
      ],
      "editor/title": [
        {
          "command": "tinymist.showPdf",
          "when": "resourceLangId == typst && editorTextFocus",
          "group": "navigation"
        },
        {
          "command": "typst-preview.preview",
          "when": "resourceLangId == typst",
          "group": "navigation"
        }
      ],
      "editor/context": [
        {
          "command": "tinymist.copyAnsiHighlight",
          "when": "resourceLangId == typst && editorTextFocus",
          "group": "9_cutcopypaste"
        }
      ],
      "view/title": [
        {
          "command": "typst-preview.noteOutline",
          "when": "view == tinymist.preview.outline",
          "group": "navigation"
        },
        {
          "command": "tinymist.syncLabel",
          "when": "view == tinymist.label-view",
          "group": "navigation"
        }
      ]
    }
  },
  "activationEvents": [
    "onWebviewPanel:typst-preview"
  ],
  "scripts": {
    "build:frontend": "cd ../../ && yarn build:preview && yarn build:editor-tools",
    "build:syntax": "cd ../../syntaxes/textmate && yarn run compile && yarn run bundle",
    "build-web-base": "node esbuild.web.mjs",
    "build-system-base": "node esbuild.system.mjs",
    "build-base": "yarn run build-web-base && yarn run build-system-base",
    "compile-shared": "yarn run build:syntax && yarn run build:frontend && node scripts/check-version.mjs && node scripts/postinstall.cjs && node scripts/config-man.cjs",
    "compile:web": "yarn run build-web-base -- --minify && yarn run compile-shared",
    "compile:system": "yarn run build-system-base -- --minify && yarn run compile-shared",
    "package": "npx @vscode/vsce package --yarn",
    "compile": "yarn run compile:system",
    "watch": "yarn run build-system-base -- --sourcemap --watch",
    "check": "tsc --noEmit",
    "format-check": "prettier --check .",
    "format": "prettier --write .",
    "test": "rimraf test-dist/ && tsc -p tsconfig.test.json && node test-dist/test/runTests.js"
  },
  "dependencies": {
    "cpr": "^3.0.1",
    "esbuild-plugin-polyfill-node": "^0.3.0",
    "node-fetch": "^3.3.2",
    "vscode-languageclient": "^9.0.0",
    "ws": "^8.13.0"
  },
  "devDependencies": {
    "@types/chai": "^5.0.1",
    "@types/mocha": "^10.0.1",
    "@types/node": "^22.13.4",
    "@types/vscode": "^1.97.0",
    "@types/ws": "^8.5.5",
    "@typescript-eslint/eslint-plugin": "^8.24.0",
    "@typescript-eslint/parser": "^8.2.4",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "^2.22.0",
    "chai": "^5.2.0",
    "esbuild": "^0.24.2",
    "eslint": "^9.20.1",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-n": "^17.15.1",
    "eslint-plugin-promise": "^7.2.1",
    "mocha": "^10.2.0",
    "ovsx": "^0.8.3",
    "typescript": "^5.2.2"
  }
}

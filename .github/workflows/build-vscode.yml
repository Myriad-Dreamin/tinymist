
name: tinymist::build::vscode::others
on:
  workflow_call:
  workflow_dispatch:

env:
  RUSTFLAGS: '-Dwarnings'
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            platform: win32
            arch: x64
            regular_build: 'true'
          - os: windows-latest
            rust-target: aarch64-pc-windows-msvc
            platform: win32
            arch: arm64
          - os: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
            regular_build: 'true'
          - os: ubuntu-20.04
            rust-target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - os: ubuntu-20.04
            rust-target: arm-unknown-linux-gnueabihf
            platform: linux
            arch: armhf
          - os: macos-13
            rust-target: x86_64-apple-darwin
            platform: darwin
            arch: x64
          - os: macos-13
            rust-target: aarch64-apple-darwin
            platform: darwin
            arch: arm64
            regular_build: 'true'
    name: build (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    env:
      target: ${{ matrix.platform }}-${{ matrix.arch }}
      isRelease: ${{ (startsWith(github.ref, 'refs/tags/') && (!contains(github.ref, 'rc') && (endsWith(github.ref, '0') || endsWith(github.ref, '2') || endsWith(github.ref, '4') || endsWith(github.ref, '6') || endsWith(github.ref, '8')))) }}
      isNightly: ${{ ((startsWith(github.ref, 'refs/tags/') && !((!contains(github.ref, 'rc') && (endsWith(github.ref, '0') || endsWith(github.ref, '2') || endsWith(github.ref, '4') || endsWith(github.ref, '6') || endsWith(github.ref, '8'))))) || (!startsWith(github.ref, 'refs/tags/') && matrix.regular_build == 'true')) }}
      isTest: ${{ matrix.rust-target == 'x86_64-unknown-linux-gnu' || matrix.rust-target == 'x86_64-pc-windows-msvc' }}
      isUniversal: ${{ matrix.rust-target == 'x86_64-unknown-linux-gnu' }}
    steps:
      - name: "Print Env"
        run: |
          echo "Running on ${{ matrix.os }}"
          echo "Target: ${{ env.target }}"
          echo "Is Release: ${{ fromJson(env.isRelease) }}"
          echo "Is Nightly: ${{ fromJson(env.isNightly) }}"
          echo "Is Test: ${{ fromJson(env.isTest) }}"
          echo "Is Universal (No Server): ${{ fromJson(env.isUniversal) }}"
      - uses: actions/checkout@v4
        with:
          submodules: recursive
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Install deps
        run: yarn install
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Build typst-preview vscode extension
        run: |
          yarn
          yarn run compile
        working-directory: ./contrib/typst-preview/editors/vscode
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Build tinymist vscode extension
        run: |
          yarn
          yarn run compile
        working-directory: ./editors/vscode
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      # https://github.com/dtolnay/rust-toolchain/issues/133
      # https://github.com/rust-lang/rustup/issues/3635
      # Only needed if your action will run two or more rust
      # commands concurrently, otherwise rustup will lazily 
      # install your rust-toolchain.toml when needed:
      - name: 'Install from rust-toolchain.toml'
        run: |
          rustup show
          rustup target add ${{ matrix.rust-target }}
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Install llvm
        if: matrix.platform == 'linux' && (fromJson(env.isRelease) || fromJson(env.isNightly))
        run: |
          sudo apt-get update
          sudo apt-get install llvm
      - name: Install AArch64 target toolchain
        if: matrix.rust-target == 'aarch64-unknown-linux-gnu' && (fromJson(env.isRelease) || fromJson(env.isNightly))
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu
      - name: Install ARM target toolchain
        if: matrix.rust-target == 'arm-unknown-linux-gnueabihf' && (fromJson(env.isRelease) || fromJson(env.isNightly))
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf
      - name: Run rust-cache
        uses: Swatinem/rust-cache@v2
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Download tinymist binary artifact
        uses: actions/download-artifact@v4
        with:
          name: artifacts-build-local-${{ matrix.rust-target }}
          path: prebuilts/tinymist${{ fromJSON('["", ".exe"]')[matrix.platform == 'win32'] }}
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
      # todo: pdf documentation for all platforms
      - name: Download font assets
        # use fonts in stable releases
        run: |
          mkdir -p assets/fonts/
          curl -L https://github.com/Myriad-Dreamin/shiroa/releases/download/v0.1.2/font-assets.tar.gz | tar -xvz -C assets/fonts
          curl -L https://github.com/Myriad-Dreamin/shiroa/releases/download/v0.1.0/charter-font-assets.tar.gz | tar -xvz -C assets/fonts
          curl -L https://github.com/Myriad-Dreamin/shiroa/releases/download/v0.1.5/source-han-serif-font-assets.tar.gz | tar -xvz -C assets/fonts
        if: matrix.rust-target == 'x86_64-unknown-linux-gnu' && (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Build PDF Documentation
        run: |
          "prebuilts/tinymist$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )" -- compile --font-path assets/fonts --root . docs/tinymist/ebook.typ
          cp docs/tinymist/ebook.pdf tinymist-docs.pdf
          mkdir -p contrib/html/editors/vscode/out/ editors/vscode/out/
          cp tinymist-docs.pdf editors/vscode/out/tinymist-docs.pdf
          cp tinymist-docs.pdf contrib/html/editors/vscode/out/tinymist-docs.pdf
        if: matrix.rust-target == 'x86_64-unknown-linux-gnu' && (fromJson(env.isRelease) || fromJson(env.isNightly))
      - name: Upload PDF Documentation
        if: matrix.rust-target == 'x86_64-unknown-linux-gnu' && (fromJson(env.isRelease) || fromJson(env.isNightly))
        uses: actions/upload-artifact@v4
        with:
          name: tinymist-docs.pdf
          path: tinymist-docs.pdf
      - name: Copy binary to output directory
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
        shell: pwsh
        run: |
          cp "prebuilts/tinymist$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )" "editors/vscode/out/"
          cp "prebuilts/tinymist$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )" "contrib/typst-preview/editors/vscode/out/"
          cp "prebuilts/tinymist$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )" "tinymist-${{ env.target }}$(If ('${{ matrix.platform }}' -eq 'win32') { '.exe' } else { '' } )"
      - name: Upload binary artifact
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
        uses: actions/upload-artifact@v4
        with:
          name: tinymist-${{ env.target }}
          path: tinymist-${{ env.target }}${{ fromJSON('["", ".exe"]')[matrix.platform == 'win32'] }}
      - name: Package typst-preview extension
        if: fromJson(env.isRelease)
        shell: pwsh
        run: yarn run package -- --target ${{ env.target }} -o typst-preview-${{ env.target }}.vsix
        working-directory: ./contrib/typst-preview/editors/vscode
      - name: Package tinymist extension
        if: fromJson(env.isRelease)
        shell: pwsh
        run: yarn run package -- --target ${{ env.target }} -o tinymist-${{ env.target }}.vsix
        working-directory: ./editors/vscode
      - name: Package typst-preview extension (Nightly)
        if: fromJson(env.isNightly)
        shell: pwsh
        run: yarn run package -- --target ${{ env.target }} -o typst-preview-${{ env.target }}.vsix --pre-release
        working-directory: ./contrib/typst-preview/editors/vscode
      - name: Package tinymist extension (Nightly)
        if: fromJson(env.isNightly)
        shell: pwsh
        run: yarn run package -- --target ${{ env.target }} -o tinymist-${{ env.target }}.vsix --pre-release
        working-directory: ./editors/vscode
      - name: Test tinymist extension
        uses: coactions/setup-xvfb@v1
        with:
          run: yarn test
          working-directory: ./editors/vscode
        if: (fromJson(env.isRelease) || fromJson(env.isNightly)) && fromJson(env.isTest)
      - name: Upload typst-preview VSIX artifact
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
        uses: actions/upload-artifact@v4
        with:
          name: typst-preview-${{ env.target }}.vsix
          path: contrib/typst-preview/editors/vscode/typst-preview-${{ env.target }}.vsix
      - name: Upload VSIX artifact
        if: (fromJson(env.isRelease) || fromJson(env.isNightly))
        uses: actions/upload-artifact@v4
        with:
          name: tinymist-${{ env.target }}.vsix
          path: editors/vscode/tinymist-${{ env.target }}.vsix

      # The universal target doesn't bundle the binary. Users of that must install
      # tinymist by themselves.
      - name: Remove server binary
        if: fromJson(env.isUniversal)
        run: rm "editors/vscode/out/tinymist"
      - name: Package extension (Universal)
        if: fromJson(env.isRelease) && fromJson(env.isUniversal)
        run: yarn run package -- -o tinymist-universal.vsix
        working-directory: ./editors/vscode
      - name: Package extension (Universal, Nightly)
        if: fromJson(env.isNightly) && fromJson(env.isUniversal)
        run: yarn run package -- -o tinymist-universal.vsix --pre-release
        working-directory: ./editors/vscode
      - name: Upload tinymist VSIX artifact (Universal)
        if: (fromJson(env.isRelease) || fromJson(env.isNightly)) && fromJson(env.isUniversal)
        uses: actions/upload-artifact@v4
        with:
          name: tinymist-universal.vsix
          path: editors/vscode/tinymist-universal.vsix
      - name: Upload Tinymist Testing log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tinymist-lsp-tests.${{ env.target }}.log
          path: editors/vscode/e2e-workspaces/simple-docs/tinymist-lsp.log